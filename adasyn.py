# -*- coding: utf-8 -*-
"""ADASYN

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Tl3RuE6kJirNHmiLvOof5NfEKLllhDyi
"""

!pip install imbalanced-learn
!pip install scikit-learn

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
from imblearn.over_sampling import ADASYN
import matplotlib.pyplot as plt

# Load the data and labels
data = pd.read_csv('/content/drive/MyDrive/Deep learning python/Data preparation Per subtask/CombinedData.csv')
labels = pd.read_csv('/content/drive/MyDrive/Deep learning python/Data preparation Per subtask/LABEL.csv')

# Separate features (X) and labels (y)
X = data.values
y = labels.values.ravel()

# Calculate the desired minority class size based on the sampling rate
original_minority_size = np.sum(y == 1)  #"1' represent minority class label
desired_sampling_rate = 1.13
desired_minority_size = int(original_minority_size * desired_sampling_rate)

# Apply ADASYN with the desired minority class size
adasyn = ADASYN(sampling_strategy={1: desired_minority_size}, n_neighbors=5, random_state=42)   #"1' represent minority class label
X_adasyn, y_adasyn = adasyn.fit_resample(X, y)

# Create a DataFrame for the synthetic data with labels
synthetic_data = pd.DataFrame(X_adasyn, columns=data.columns)
synthetic_data['label'] = y_adasyn  # Add the label column

# Save the synthetic data to a CSV file with labels
synthetic_data_only = synthetic_data[~synthetic_data.index.isin(data.index)]  # Select only the synthetic data rows
synthetic_data_only.to_csv('/content/drive/MyDrive/Deep learning python/Data preparation Per subtask/ADASYNLM_aug2.csv', index=False)

# Plotting the original dataset
plt.figure(figsize=(10, 5))
plt.subplot(1, 2, 1)
plt.scatter(X[:, 0], X[:, 1], c=y, marker='o', edgecolor='k', alpha=0.7)
plt.title('Original Dataset')
plt.xlabel('Feature 1')
plt.ylabel('Feature 2')

# Plotting the augmented dataset
plt.subplot(1, 2, 2)
plt.scatter(X_adasyn[:, 0], X_adasyn[:, 1], c=y_adasyn, marker='o', edgecolor='k', alpha=0.7)
plt.title('Augmented Dataset with ADASYN')
plt.xlabel('Feature 1')
plt.ylabel('Feature 2')

plt.tight_layout()
plt.show()

# Check the class distribution
print(f'Original dataset shape: {np.bincount(y)}')
print(f'Resampled dataset shape: {np.bincount(y_adasyn)}')